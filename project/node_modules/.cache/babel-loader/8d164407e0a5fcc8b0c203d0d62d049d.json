{"ast":null,"code":"import _classCallCheck from \"/Users/juliama/Documents/GitHub/enas410/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/juliama/Documents/GitHub/enas410/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/juliama/Documents/GitHub/enas410/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/juliama/Documents/GitHub/enas410/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/juliama/Documents/GitHub/enas410/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/juliama/Documents/GitHub/enas410/src/containers/NavManager/NavManager.js\";\nimport React, { Component } from 'react';\nimport Aux from '../../hoc/Aux'; // manage the floto and the navbar\n\nimport Floto from '../../components/Floto/Floto';\nimport Nav from '../../components/Nav/Nav';\n\nvar navmanager =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(navmanager, _Component);\n\n  function navmanager(props) {\n    var _this;\n\n    _classCallCheck(this, navmanager);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(navmanager).call(this, props));\n\n    _this.handleScroll = function (event) {\n      console.log(window.innerWidth);\n      var scrollTop = document.scrollingElement.scrollTop;\n      var scrollThreshold = window.innerHeight - 64;\n\n      if (window.innerWidth < 415) {\n        _this.setState({\n          positionType: \"absolute\",\n          top: 0,\n          width: \"'wdth' 1000\" + \", 'wght' 800\"\n        });\n      } else {\n        var shrinkSpeed = 4.4 + 1052.3 / window.innerWidth; // set the font-width as a function of scroll and max font width\n\n        var fontMax = 1000;\n        var normalized = ((scrollTop - 0.0) / document.documentElement.scrollHeight - 0.0) * shrinkSpeed;\n        var widthNo = ((1 - normalized) * fontMax).toString();\n        var fontWeight = 800 - 200 / window.innerHeight * scrollTop;\n        var width = \"'wdth' \" + widthNo + \", 'wght' \" + fontWeight;\n        var paddingBottom = 7 - 7 / window.innerHeight * scrollTop;\n\n        _this.setState({\n          width: width,\n          paddingBottom: paddingBottom + \"vh\"\n        }); // don't follow on scroll once width threshold has been met\n\n\n        var pos = scrollThreshold / 1.47;\n\n        if (scrollTop > pos) {\n          _this.setState({\n            positionType: \"absolute\",\n            top: pos\n          });\n        } else {\n          _this.setState({\n            positionType: \"fixed\",\n            top: 0\n          });\n        }\n      } // hiding the logo completely after a threshold\n\n\n      if (!_this.state.scrollThresholdMet && scrollTop > scrollThreshold - 280) {\n        _this.setState({\n          scrollThresholdMet: true,\n          fadedOnce: true\n        });\n      }\n\n      if (_this.state.scrollThresholdMet && scrollTop <= scrollThreshold - 280) {\n        _this.setState({\n          scrollThresholdMet: false\n        });\n      }\n    };\n\n    _this.state = {\n      scrollThresholdMet: false,\n      width: \"'wdth' 1000\" + \", 'wght' 800\",\n      positionType: \"absolute\",\n      top: 0,\n      fadedOnce: false,\n      paddingBottom: \"7vh\"\n    };\n    return _this;\n  }\n\n  _createClass(navmanager, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener('scroll', this.handleScroll);\n      window.addEventListener('resize', this.handleScroll);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('scroll', this.handleScroll);\n      window.removeEventListener('resize', this.handleScroll);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Aux, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Floto, {\n        scrollThresholdMet: this.state.scrollThresholdMet,\n        positionType: this.state.positionType,\n        top: this.state.top,\n        width: this.state.width,\n        paddingBottom: this.state.paddingBottom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(Nav, {\n        scrollThresholdMet: this.state.scrollThresholdMet,\n        fadedOnce: this.state.fadedOnce,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return navmanager;\n}(Component);\n\nexport default navmanager;","map":{"version":3,"sources":["/Users/juliama/Documents/GitHub/enas410/src/containers/NavManager/NavManager.js"],"names":["React","Component","Aux","Floto","Nav","navmanager","props","handleScroll","event","console","log","window","innerWidth","scrollTop","document","scrollingElement","scrollThreshold","innerHeight","setState","positionType","top","width","shrinkSpeed","fontMax","normalized","documentElement","scrollHeight","widthNo","toString","fontWeight","paddingBottom","pos","state","scrollThresholdMet","fadedOnce","addEventListener","removeEventListener"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,eAAhB,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,GAAP,MAAgB,0BAAhB;;IAEMC,U;;;;;AACF,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,oFAAMA,KAAN;;AADe,UAsBnBC,YAtBmB,GAsBJ,UAACC,KAAD,EAAW;AAEtBC,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,UAAnB;AAEA,UAAIC,SAAS,GAAGC,QAAQ,CAACC,gBAAT,CAA0BF,SAA1C;AACA,UAAMG,eAAe,GAAGL,MAAM,CAACM,WAAP,GAAqB,EAA7C;;AAEA,UAAIN,MAAM,CAACC,UAAP,GAAoB,GAAxB,EAA6B;AACzB,cAAKM,QAAL,CAAc;AACVC,UAAAA,YAAY,EAAE,UADJ;AAEVC,UAAAA,GAAG,EAAE,CAFK;AAGVC,UAAAA,KAAK,EAAE,gBAAgB;AAHb,SAAd;AAKH,OAND,MAMO;AAGH,YAAMC,WAAW,GAAG,MAAI,SAAOX,MAAM,CAACC,UAAtC,CAHG,CAKH;;AACA,YAAMW,OAAO,GAAG,IAAhB;AACA,YAAIC,UAAU,GAAG,CAAC,CAACX,SAAS,GAAG,GAAb,IAAqBC,QAAQ,CAACW,eAAT,CAAyBC,YAA9C,GAA8D,GAA/D,IAAsEJ,WAAvF;AACA,YAAIK,OAAO,GAAG,CAAC,CAAC,IAAIH,UAAL,IAAmBD,OAApB,EAA6BK,QAA7B,EAAd;AACA,YAAIC,UAAU,GAAG,MAAO,MAAMlB,MAAM,CAACM,WAAb,GAA2BJ,SAAnD;AACA,YAAIQ,KAAK,GAAG,YAAYM,OAAZ,GAAsB,WAAtB,GAAoCE,UAAhD;AACA,YAAIC,aAAa,GAAG,IAAK,IAAInB,MAAM,CAACM,WAAX,GAAyBJ,SAAlD;;AACA,cAAKK,QAAL,CAAc;AACVG,UAAAA,KAAK,EAAGA,KADE;AAEVS,UAAAA,aAAa,EAAGA,aAAa,GAAG;AAFtB,SAAd,EAZG,CAiBH;;;AACA,YAAMC,GAAG,GAAGf,eAAe,GAAG,IAA9B;;AACA,YAAIH,SAAS,GAAGkB,GAAhB,EAAqB;AACjB,gBAAKb,QAAL,CAAc;AACVC,YAAAA,YAAY,EAAE,UADJ;AAEVC,YAAAA,GAAG,EAAEW;AAFK,WAAd;AAIH,SALD,MAKO;AACH,gBAAKb,QAAL,CAAc;AACVC,YAAAA,YAAY,EAAE,OADJ;AAEVC,YAAAA,GAAG,EAAE;AAFK,WAAd;AAIH;AACJ,OA3CqB,CA6CtB;;;AACA,UAAI,CAAC,MAAKY,KAAL,CAAWC,kBAAZ,IAAkCpB,SAAS,GAAGG,eAAe,GAAG,GAApE,EAAyE;AACrE,cAAKE,QAAL,CAAc;AACVe,UAAAA,kBAAkB,EAAE,IADV;AAEVC,UAAAA,SAAS,EAAE;AAFD,SAAd;AAIH;;AAED,UAAI,MAAKF,KAAL,CAAWC,kBAAX,IAAiCpB,SAAS,IAAIG,eAAe,GAAG,GAApE,EAAyE;AACrE,cAAKE,QAAL,CAAc;AACVe,UAAAA,kBAAkB,EAAE;AADV,SAAd;AAGH;AACJ,KAhFkB;;AAEf,UAAKD,KAAL,GAAa;AACTC,MAAAA,kBAAkB,EAAE,KADX;AAETZ,MAAAA,KAAK,EAAE,gBAAgB,cAFd;AAGTF,MAAAA,YAAY,EAAE,UAHL;AAITC,MAAAA,GAAG,EAAE,CAJI;AAKTc,MAAAA,SAAS,EAAE,KALF;AAMTJ,MAAAA,aAAa,EAAE;AANN,KAAb;AAFe;AAUlB;;;;wCAEmB;AAChBnB,MAAAA,MAAM,CAACwB,gBAAP,CAAwB,QAAxB,EAAkC,KAAK5B,YAAvC;AACAI,MAAAA,MAAM,CAACwB,gBAAP,CAAwB,QAAxB,EAAkC,KAAK5B,YAAvC;AACH;;;2CAEsB;AACnBI,MAAAA,MAAM,CAACyB,mBAAP,CAA2B,QAA3B,EAAqC,KAAK7B,YAA1C;AACAI,MAAAA,MAAM,CAACyB,mBAAP,CAA2B,QAA3B,EAAqC,KAAK7B,YAA1C;AACH;;;6BA8DQ;AACL,aACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AACI,QAAA,kBAAkB,EAAE,KAAKyB,KAAL,CAAWC,kBADnC;AAEI,QAAA,YAAY,EAAE,KAAKD,KAAL,CAAWb,YAF7B;AAGI,QAAA,GAAG,EAAE,KAAKa,KAAL,CAAWZ,GAHpB;AAII,QAAA,KAAK,EAAE,KAAKY,KAAL,CAAWX,KAJtB;AAKI,QAAA,aAAa,EAAE,KAAKW,KAAL,CAAWF,aAL9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAQI,oBAAC,GAAD;AAAK,QAAA,kBAAkB,EAAE,KAAKE,KAAL,CAAWC,kBAApC;AACK,QAAA,SAAS,EAAE,KAAKD,KAAL,CAAWE,SAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARJ,CADJ;AAeH;;;;EAnGoBjC,S;;AAuGzB,eAAeI,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport Aux from '../../hoc/Aux';\n\n// manage the floto and the navbar\nimport Floto from '../../components/Floto/Floto';\nimport Nav from '../../components/Nav/Nav';\n\nclass navmanager extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            scrollThresholdMet: false,\n            width: \"'wdth' 1000\" + \", 'wght' 800\",\n            positionType: \"absolute\",\n            top: 0,\n            fadedOnce: false,\n            paddingBottom: \"7vh\",\n        }\n    }\n\n    componentDidMount() {\n        window.addEventListener('scroll', this.handleScroll);\n        window.addEventListener('resize', this.handleScroll)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.handleScroll);\n        window.removeEventListener('resize', this.handleScroll)\n    }\n\n    handleScroll = (event) => {\n\n        console.log(window.innerWidth)\n\n        let scrollTop = document.scrollingElement.scrollTop\n        const scrollThreshold = window.innerHeight - 64;\n\n        if (window.innerWidth < 415) {\n            this.setState({\n                positionType: \"absolute\",\n                top: 0,\n                width: \"'wdth' 1000\" + \", 'wght' 800\",\n            })\n        } else {\n\n            \n            const shrinkSpeed = 4.4+1052.3/window.innerWidth;\n\n            // set the font-width as a function of scroll and max font width\n            const fontMax = 1000;\n            let normalized = ((scrollTop - 0.0) / (document.documentElement.scrollHeight) - 0.0) * shrinkSpeed\n            let widthNo = ((1 - normalized) * fontMax).toString();\n            let fontWeight = 800 - (200 / window.innerHeight * scrollTop);\n            let width = \"'wdth' \" + widthNo + \", 'wght' \" + fontWeight; \n            let paddingBottom = 7 - (7 / window.innerHeight * scrollTop);\n            this.setState({\n                width : width,\n                paddingBottom : paddingBottom + \"vh\",\n            })\n\n            // don't follow on scroll once width threshold has been met\n            const pos = scrollThreshold / 1.47;\n            if (scrollTop > pos) {\n                this.setState({\n                    positionType: \"absolute\",\n                    top: pos\n                })\n            } else {\n                this.setState({\n                    positionType: \"fixed\",\n                    top: 0\n                })\n            }\n        }\n\n        // hiding the logo completely after a threshold\n        if (!this.state.scrollThresholdMet && scrollTop > scrollThreshold - 280) {\n            this.setState({\n                scrollThresholdMet: true,\n                fadedOnce: true,\n            })\n        }\n\n        if (this.state.scrollThresholdMet && scrollTop <= scrollThreshold - 280) {\n            this.setState({\n                scrollThresholdMet: false,\n            })\n        }\n    }\n\n    render() {\n        return(\n            <Aux>\n                <Floto \n                    scrollThresholdMet={this.state.scrollThresholdMet}\n                    positionType={this.state.positionType}\n                    top={this.state.top}\n                    width={this.state.width}\n                    paddingBottom={this.state.paddingBottom}\n                />\n                <Nav scrollThresholdMet={this.state.scrollThresholdMet} \n                     fadedOnce={this.state.fadedOnce}/>\n            </Aux>\n        )\n     \n\n    }\n\n}\n\nexport default navmanager;"]},"metadata":{},"sourceType":"module"}